
Le joueur a deux vecteurs directionnels principaux :

    - dir_x et dir_y : la direction dans laquelle le joueur regarde.
    - plane_x et plane_y : le vecteur perpendiculaire à la direction de la caméra, utilisé pour le plan de la caméra dans le raycasting (utile pour le rendu 3D).

            ---------- 1. Calcul de la rotation ---------

Pour tourner, nous devons ajuster ces vecteurs directionnels en utilisant les formules de rotation :

 - nouveau_dir_x=dir_x⋅cos⁡(θ)−dir_y⋅sin⁡(θ)nouveau_dir_x=dir_x⋅cos(θ)−dir_y⋅sin(θ)
 - nouveau_dir_y=dir_x⋅sin⁡(θ)+dir_y⋅cos⁡(θ)nouveau_dir_y=dir_x⋅sin(θ)+dir_y⋅cos(θ)

Où θθ est l'angle de rotation.

             ---------- 2. Implementation de la rotation --------

void rotate_player(t_game *game, double angle)
{
    double old_dir_x = game->player.dir_x;
    double old_plane_x = game->player.plane_x;

    // Calculer les nouveaux vecteurs directionnels
    game->player.dir_x = game->player.dir_x * cos(angle) - game->player.dir_y * sin(angle);
    game->player.dir_y = old_dir_x * sin(angle) + game->player.dir_y * cos(angle);

    // Calculer le nouveau vecteur plane
    game->player.plane_x = game->player.plane_x * cos(angle) - game->player.plane_y * sin(angle);
    game->player.plane_y = old_plane_x * sin(angle) + game->player.plane_y * cos(angle);
}

Dans un jeu de type raycasting, comme Cub3D, la rotation du joueur implique de changer la direction
dans laquelle le joueur regarde (vecteur direction) et le plan de la caméra, qui détermine la
perspective de la vue.

Variables  : 

    - dir_x et dir_y : Ces variables représentent le vecteur directionnel du joueur. 
    Ce vecteur indique la direction dans laquelle le joueur regarde.
    - plane_x et plane_y : Ces variables représentent le plan de la caméra. Ce vecteur est 
    perpendiculaire au vecteur direction et détermine la largeur de la vue du joueur.

------ Fonction rotate_player -------

1. Sauvegarder les anciennes valeurs : 

- double old_dir_x = game->player.dir_x;
- double old_plane_x = game->player.plane_x;

Pourquoi : Avant de changer les valeurs de dir_x et plane_x, nous sauvegardons leurs anciennes 
valeurs. Ces anciennes valeurs sont nécessaires pour calculer les nouvelles valeurs de dir_y et 
plane_y.

2. Appliquer la rotation au vecteur direction : 

- game->player.dir_x = game->player.dir_x * cos(angle) - game->player.dir_y * sin(angle);
- game->player.dir_y = old_dir_x * sin(angle) + game->player.dir_y * cos(angle);

Calcul :
    - game->player.dir_x : Cette nouvelle valeur est calculée en utilisant les formules de r
    otation en coordonnées cartésiennes. Cela permet de faire pivoter le vecteur direction d'un 
    angle donné.
    - game->player.dir_y : Utilise la valeur sauvegardée de old_dir_x pour éviter que la 
    nouvelle valeur de dir_x ne perturbe le calcul.

Explication des formules :
    - new_dir_x = old_dir_x * cos(angle) - old_dir_y * sin(angle)
    - new_dir_y = old_dir_x * sin(angle) + old_dir_y * cos(angle)

Ces formules viennent de la rotation en 2D en utilisant des matrices de rotation :
    - [cos⁡(θ)−sin⁡(θ)sin⁡(θ)cos⁡(θ)]
    - [cos(θ)sin(θ)​−sin(θ)cos(θ)​]

3. Appliquer la rotation au plan de la caméra

- game->player.plane_x = game->player.plane_x * cos(angle) - game->player.plane_y * sin(angle);
- game->player.plane_y = old_plane_x * sin(angle) + game->player.plane_y * cos(angle);

Calcul :
    - game->player.plane_x : La nouvelle valeur est calculée de la même manière que pour 
    le vecteur direction, mais appliquée au plan de la caméra.
    - game->player.plane_y : Utilise la valeur sauvegardée de old_plane_x pour les mêmes raisons 
    qu'auparavant.

Explication des formules :
    - new_plane_x = old_plane_x * cos(angle) - old_plane_y * sin(angle)
    - new_plane_y = old_plane_x * sin(angle) + old_plane_y * cos(angle)
    Encore une fois, ces formules utilisent la matrice de rotation en 2D.

                    ---------- Intégration dans le Projet -----------

- Rotation : La rotation du joueur permet de changer la direction de la vue du joueur.
En ajustant dir_x et dir_y, le joueur peut tourner à gauche ou à droite.
- Champ de Vision : Ajuster plane_x et plane_y change la perspective du joueur. Cela 
permet d'avoir une vue correcte et réaliste lorsque le joueur tourne.
- Raycasting : Les nouvelles valeurs de dir et plane sont utilisées dans l'algorithme de 
raycasting pour calculer les rayons projetés depuis la position du joueur. Cela détermine ce 
que le joueur voit à l'écran.

                        ----------- Exemple Concret ----------

Supposons que le joueur regarde initialement vers le haut (direction positive de Y) :
Initialement :
    - dir_x = 0
    - dir_y = 1
    - plane_x = 0.66
    - plane_y = 0

Si le joueur tourne de 90 degrés vers la droite (clockwise) :
Nouvelle direction :
    - dir_x = cos(90°) * 0 - sin(90°) * 1 = -1
    - dir_y = sin(90°) * 0 + cos(90°) * 1 = 0
    - plane_x = cos(90°) * 0.66 - sin(90°) * 0 = 0
    - plane_y = sin(90°) * 0.66 + cos(90°) * 0 = 0.66

Nouvelle direction après rotation :
    - dir_x = -1
    - dir_y = 0
    - plane_x = 0
    - plane_y = 0.66

Cela signifie que le joueur regarde maintenant vers la gauche (direction négative de X).
Conclusion

La fonction rotate_player ajuste les vecteurs directionnels et le plan de la caméra pour 
refléter une rotation du joueur. En comprenant les mathématiques derrière les rotations et la 
manière dont elles affectent la direction de la vue et le champ de vision, vous pouvez manipuler 
la perspective du joueur pour qu'il puisse tourner correctement dans le jeu.

       --------------- 3. Concepts et calculs rotation/direction --------------

Contexte de dir_x et dir_y : 

    - dir_x et dir_y représentent la direction dans laquelle le joueur regarde.
    - Ces valeurs forment un vecteur directionnel normalisé (de longueur 1).

Contexte de plane_x et plane_y :

    - plane_x et plane_y représentent le plan de la caméra, qui est perpendiculaire à la 
    direction du joueur.
    - Ce vecteur détermine la largeur de la vue du joueur sur l'écran.

Visualisation :
- Imaginez une carte 2D avec les axes X et Y
 Y
 ^
 |
 |
 |
 |
 |
 |
 +------------------> X

Exemple sans rotation

    Joueur regarde vers le haut (Y positif) :
        dir_x = 0
        dir_y = 1
        plane_x = 0.66
        plane_y = 0

    Dir:  ^
         / \
        /   \
       /     \
      /       \
     /         \
    P<--------->P

Exemple avec rotation de 90 degrés vers la droite (clockwise)

    Joueur regarde vers la droite (X positif) :
        dir_x = 1
        dir_y = 0
        plane_x = 0
        plane_y = -0.66

    Dir:  ---->
         |    |
         |    |
         |    |
         P<-->P

                      --------- Calculs concrets ----------

Pour chaque rotation, nous ajustons les vecteurs directionnels et le plan de la caméra. 
Considérons une rotation de l'angle θθ.

Rotation de 45 degrés (π/4π/4 radians)
Avant rotation :
    - dir_x = 0
    - dir_y = 1
    - plane_x = 0.66
    - plane_y = 0

Formules de rotation :
    - dir_x_new=dir_x⋅cos⁡(θ)−dir_y⋅sin⁡(θ)
    - dir_y_new=dir_x⋅sin⁡(θ)+dir_y⋅cos⁡(θ)
    - plane_x_new=plane_x⋅cos⁡(θ)−plane_y⋅sin⁡(θ)
    - plane_y_new=plane_x⋅sin⁡(θ)+plane_y⋅cos⁡(θ)

Calculs pour 45 degrés (θ=π/4θ=π/4) :
    - dir_x_new = 0 \cdot \cos(\pi/4) - 1 \cdot \sin(\pi/4) = -0.707
    - dir_y_new = 0 \cdot \sin(\pi/4) + 1 \cdot \cos(\pi/4) = 0.707
    - plane_x_new = 0.66 \cdot \cos(\pi/4) - 0 \cdot \sin(\pi/4) = 0.466
    - plane_y_new = 0.66 \cdot \sin(\pi/4) + 0 \cdot \cos(\pi/4) = 0.466
