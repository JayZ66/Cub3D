else if (keycode == KEY_LEFT)
		rotate_player(game, game->player.rot_speed);
	else if (keycode == KEY_RIGHT)
		rotate_player(game, -game->player.rot_speed);

       -------------- EXPLANATIONS ------------

La manière dont la vitesse de rotation (rot_speed) est utilisée avec les signes + 
et - détermine la direction dans laquelle le joueur tourne. Expliquons en détail 
ce que cela implique et comment cela affecte la vision du joueur.

1. Signification des Signes + et - pour rot_speed

    Rotation à Gauche (Sens Anti-Horaire) : 
        - Lorsqu'on utilise un signe - pour rot_speed, cela signifie que nous 
        appliquons une rotation dans le sens antihoraire (ou vers la gauche). 
        Cela fait pivoter la vue du joueur vers la gauche.
        - Exemple : Si rot_speed est 0.05 radians (environ 2.86 degrés), 
        alors en passant -rot_speed à la fonction rotate_player, on fait pivoter 
        le joueur de 2.86 degrés vers la gauche.

    Rotation à Droite (Sens Horaire) :
        - Lorsqu'on utilise un signe + pour rot_speed, cela signifie que nous 
        appliquons une rotation dans le sens horaire (ou vers la droite). Cela 
        fait pivoter la vue du joueur vers la droite.
        - Exemple : Si rot_speed est 0.05 radians, alors en passant +rot_speed 
        à la fonction rotate_player, on fait pivoter le joueur de 2.86 degrés 
        vers la droite.

2. Comment la Vision se Déplace

Le mouvement de la vision du joueur dépend des calculs trigonométriques 
appliqués aux vecteurs directionnels et au plan de la caméra. 
Voici comment cela fonctionne :

    Rotation des Vecteurs Directionnels (dir_x, dir_y) :

    Les vecteurs directionnels (dir_x, dir_y) déterminent la direction dans 
    laquelle le joueur regarde. La rotation de ces vecteurs affecte la direction 
    du regard du joueur :
        - Rotation à Droite (positive) : Les coordonnées du vecteur directionnel 
        sont ajustées pour faire pivoter la direction du regard vers la droite.
        - Rotation à Gauche (négative) : Les coordonnées du vecteur directionnel 
        sont ajustées pour faire pivoter la direction du regard vers la gauche.

Les calculs trigonométriques utilisés sont les suivants :

// Calcul de la nouvelle direction après la rotation
- game->player.dir_x = old_dir_x * cos(angle) - game->player.dir_y * sin(angle);
- game->player.dir_y = old_dir_x * sin(angle) + game->player.dir_y * cos(angle);

    > old_dir_x et old_dir_y sont les coordonnées avant la rotation.
    > cos(angle) et sin(angle) sont les fonctions trigonométriques pour le 
    calcul de la nouvelle direction.
    > angle est la quantité de rotation en radians.

    Rotation du Plan de la Caméra (plane_x, plane_y) : 

    Le plan de la caméra (plane_x, plane_y) détermine l'angle de vue et 
    la perspective. La rotation de ce plan ajuste la façon dont le joueur 
    voit les objets autour de lui :

    - Rotation à Droite : Le plan de la caméra est ajusté pour que la vue se 
    déplace vers la droite.
    - Rotation à Gauche : Le plan de la caméra est ajusté pour que la vue se 
    déplace vers la gauche.

Les calculs pour le plan de la caméra sont les suivants :
    // Calcul du nouveau plan de la caméra après la rotation
    - game->player.plane_x = old_plane_x * cos(angle) - game->player.plane_y * sin(angle);
    - game->player.plane_y = old_plane_x * sin(angle) + game->player.plane_y * cos(angle);

        > old_plane_x et old_plane_y sont les coordonnées du plan de la caméra 
        avant la rotation.

3. Visualisation des Calculs : 

Pour mieux comprendre comment la rotation affecte la vision du joueur, 
imagine ce qui suit :

    Rotation à Droite (par exemple, 90 degrés):
     - Si le joueur regarde vers l'avant, une rotation de 90 degrés à droite fait 
     que la direction du regard se déplace vers la droite. 
     Ce qui était "devant" devient "à droite".
    - Le plan de la caméra s'ajuste pour suivre cette nouvelle direction, 
    ce qui modifie la perspective.

    Rotation à Gauche (par exemple, 90 degrés):
    - Si le joueur regarde vers l'avant, une rotation de 90 degrés à gauche fait 
    que la direction du regard se déplace vers la gauche. 
    Ce qui était "devant" devient "à gauche".
    - Le plan de la caméra s'ajuste pour suivre cette nouvelle direction.

4. Conclusion

En utilisant +rot_speed pour tourner à droite et -rot_speed pour tourner à gauche, 
tu contrôles la direction dans laquelle le joueur tourne. 
Les calculs trigonométriques appliquent cette rotation aux vecteurs directionnels 
et au plan de la caméra pour ajuster la perspective du joueur de manière fluide. 
Cela permet au joueur de tourner et de voir autour de lui en fonction de la 
direction des touches pressées.